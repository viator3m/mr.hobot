import logging
import os

import requests

from telegram import ReplyKeyboardMarkup
from telegram.ext import Updater, Filters, MessageHandler, CommandHandler

from dotenv import load_dotenv

load_dotenv()

secret_token = os.getenv('TOKEN')

logging.basicConfig(
    format='%(asctime)s | %(name)s | %(levelname)s | %(message)s',
    level=logging.INFO
)

CAT_URL = 'https://api.thecatapi.com/v1/images/search'


def say_hi(update, context):
    chat = update.effective_chat
    context.bot.send_message(
        chat_id=chat.id,
        text='–Ø –ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ —É–º–µ—é –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫—Ä–∞—Å–∏–≤–æ–µ –∏ —Å–º–µ—à–Ω–æ–µ.üò∏\n'
             '–ù–æ —Å–∫–æ—Ä–æ –µ—â–µ —á–µ–º—É-–Ω–∏–±—É–¥—å –Ω–∞—É—á—É—Å—å üòé\n'
             '*—Å–ª–æ–Ω–æ–≤—Å–∫–∏–µ —Ä–∞–¥–æ—Å—Ç–Ω—ã–µ –∑–≤—É–∫–∏*\n')


def get_new_image():
    try:
        response = requests.get(CAT_URL).json()
    except Exception as error:
        logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É API: {error}')
        dog_url = 'https://api.thedogapi.com/v1/images/search'
        response = requests.get(dog_url).json()

    random_cat = response[0].get('url')
    return random_cat


def new_cat(update, context):
    chat = update.effective_chat
    context.bot.send_photo(
        chat.id,
        get_new_image()
    )


def wake_up(update, context):
    chat = update.effective_chat
    name = update.effective_chat.first_name

    buttons = ReplyKeyboardMarkup(
        [
            ['/newcat'],
        ],
        resize_keyboard=True)

    context.bot.send_message(
        chat_id=chat.id,
        text=f'–ü—Ä–∏–≤–µ—Ç, {name}! –ü–æ—Å–º–æ—Ç—Ä–∏ –∫–∞–∫–æ–≥–æ –∫–æ—Ç–∏–∫–∞ —è —Ç–µ–±–µ –Ω–∞—à–µ–ª.',
        reply_markup=buttons
    )
    context.bot.send_photo(chat.id, get_new_image())


def main():
    updater = Updater(token=secret_token)

    updater.dispatcher.add_handler(CommandHandler('start', wake_up))
    updater.dispatcher.add_handler(CommandHandler('newcat', new_cat))
    updater.dispatcher.add_handler(MessageHandler(Filters.text, say_hi))

    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    main()
